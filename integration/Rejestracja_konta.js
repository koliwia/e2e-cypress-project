import fixture from '../fixtures/testdata.json';

describe('User registration', () => {
    beforeEach(() => {
        // eslint-disable-next-line @typescript-eslint/no-magic-numbers
        cy.viewport(1920, 1080);
    });
    it('should register the user with valid data', () => {
        cy.visit('/')
            .getElement('nav', 'login').click()
            .getElement('link', 'register')
            .click()
            .GenerateUsername()
            .blur()
            .getElement('input-icon', 'success')
            .GenerateEmail()
            .blur()
            .getElement('input-icon', 'success')
            .window()
            .getElementByName('password')
            .click()
            .type('validpassword')
            .getElement('input-icon', 'success')
            .getElement('register', 'tos')
            .click()
            .getButtonByType('submit')
            .should('be.enabled')
            .click()
            .getElement('nav-item', 'profile')
            .click()
            .contains('Wyświetl profil')
            .visit('http://mail.animu.local.me/#/')
            .intercept('/email/*/html')
            .as('EmailContent')
            .get('@UsernameId')
            .then(Username => cy.contains(Username))
            .click()
            .wait('@EmailContent')
            .get('iframe')
            .its('0.contentDocument.body')
            .find('a')
            .invoke('attr', 'href')
            .then(href => cy.visit(href))
            .contains('Adres e-mail został potwierdzony');
    });
    it('should not register the user with invalid data', () => {
        cy.visit('/')
            .getElement('nav', 'login').click()
            .getElement('link', 'register')
            .click()
            .GenerateFalseUsername()
            .blur()
            .getElement('input-icon', 'error')
            .GenerateFalseEmail()
            .blur()
            .getElement('input-icon', 'error')
            .GenerateFalsePassword()
            .blur()
            .getElement('input-icon', 'error')
            .getElement('register', 'tos')
            .click()
            .getButtonByType('submit')
            .should('be.disabled');
    });
    it('should inform about the taken username and email', () => {
        cy.visit('/')
            .getElement('nav', 'login')
            .click()
            .getElement('link', 'register')
            .click()
            .getElementByName('given-name')
            .click()
            .type('YournTakenName')
            .getElementByName('email')
            .click()
            .type('yourtakenemail@gmail.com')
            .getElementByName('email')
            .click()
            .getElementByName('password')
            .type('YourTakenPassword')
            .getElement('register', 'tos')
            .click()
            .getButtonByType('submit')
            .should('be.enabled')
            .click()
            .click()
            .getElement('nav-item', 'profile')
            .click()
            .getElement('profile-box', 'logout')
            .click()
            .getElement('nav', 'login')
            .click()
            .getElement('link', 'register')
            .click()
            .getElementByName('given-name')
            .click()
            .type(fixture.Username)
            .blur()
            .getElement('input-icon', 'error')
            .getElementByName('email')
            .click()
            .type(fixture.Email)
            .blur()
            .getElement('input-icon', 'error');
    });
});
